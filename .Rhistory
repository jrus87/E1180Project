colnames(Seattle.Retailer)[colnames(Seattle.Retailer)=="Seattle.Retailer[even_indexes, ]"] <- "Address.Ret"
names(Seattle.Retailer)
# Create unique King County Retailers to merge with Seattle.Retailers to get addresses
unique_vector <- which(!duplicated(KingCounty.Retailer$Name))
KingCounty.Retailer.unique <- as.data.frame(KingCounty.Retailer[unique_vector,])
# Formatting the names of a few before merging
table(KingCounty.Retailer$Name.Ret)
table(Seattle.Retailer$Name.Ret)
# HERBAN LEGENDS, UNCLE IKE'S, UNCLE IKES, DIEGO PELLICER, SEATTLE CANNABIS COMPANY, #HASHTAG, OZ.
# Queen Anne Cannabis Co. is not in the 502data
Seattle.Retailer$Name.Ret <- as.character(Seattle.Retailer$Name.Ret)
Seattle.Retailer[1,1] <- "HERBAN LEGENDS"
Seattle.Retailer[2,1] <- "UNCLE IKE'S"
Seattle.Retailer[3,1] <- "UNCLE IKES"
Seattle.Retailer[6,1] <- "DIEGO PELLICER"
Seattle.Retailer[11,1] <- "SEATTLE CANNABIS COMPANY"
Seattle.Retailer[12,1] <- "#HASHTAG"
Seattle.Retailer[17,1] <- "OZ."
Seattle.Retailer <- Seattle.Retailer[-14,]  # POT SHOP has moved to 1628 Dexter Ave N
Seattle.Retailer
# Merge
Retailer <- left_join(Retailer, Seattle.Retailer, by="Name.Ret")
KingCounty.Retailer <- left_join(KingCounty.Retailer, Seattle.Retailer, by="Name.Ret")
###
# Get Geo_locations
##
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type <- x$results[[1]]$geometry$location_type
formatted_address <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
} else {
return(c(NA,NA,NA, NA))
}
}
# Only keep data for Seattle
Seattle.Retailer <- na.omit(KingCounty.Retailer)
Seattle.Retailer <- as.data.frame(Seattle.Retailer)
# Specify vector for geo-location
address <- Seattle.Retailer$Address
ptm <- proc.time()
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
head(locations)
proc.time() - ptm
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
locations  <- ldply(address, function(x) geoCode(x))
names(locations)  <- c("lat.Ret","lon.Ret","location_type", "Address.Ret")
which(is.na(locations$location_type))
Seattle.Retailer <- read.table("./Data/Location.txt", sep=",", stringsAsFactors = FALSE)
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2014/12"] <- "2014-12" # /12 indicates all months (important for analysis)
head(Seattle.Retailer$Month.Ret)
table(Seattle.Retailer$Month.Ret)
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2014"] <- "2014-12" # /12 indicates all months (important for analysis)
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2015"] <- "2015-12" # /12 indicates all months (important for analysis)
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/01"] <- "2016-01"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/02"] <- "2016-02"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/03"] <- "2016-03"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/04"] <- "2016-04"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/05"] <- "2016-05"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/06"] <- "2016-06"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/07"] <- "2016-07"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/08"] <- "2016-08"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/09"] <- "2016-09"
Seattle.Retailer$Month.Ret[Seattle.Retailer$Month.Ret=="2016/10"] <- "2016-10"
table(Seattle.Retailer$Month.Ret)
write.table(Seattle.Retailer, file="./Data/Location.txt", sep = ",")
# Setting our working directory
wrkdir <- c('C:/Users/Benji/Desktop/Statistics/Git/Repositories/E1180Project',
'~/Hertie School/Fall 2016/CollaborativeSocialScienceDataAnalysis/CSSR')
repmis::set_valid_wd(wrkdir)
# Installing packages
packages <- c('dplyr', 'repmis', 'ggmap', 'ggplot2', 'geosphere', 'fields', 'lubridate')
for (p in packages) {
if (p %in% installed.packages()) require(p, character.only=TRUE)
else {
install.packages(p)
require(p, character.only=TRUE)
}
}
# Creating a BibTex file
repmis::LoadandCite(packages, file = './BibTex/RpackageCitations_Analysis.bib')
# Removing from global environment for better readability
rm(packages, p, wrkdir)
###
# Data (last updated on November 5th)
###
# Clean both Retailer and Producer/Processor Data
source("./Codes/Cleaning_Retailers.R")
source("./Codes/Cleaning_ProdProc.R")
# Locations of Seattle's retailers are not sources, as the geocaching from Google is temperemental
Seattle.Retailer <- read.table("./Data/Location.txt", sep=",", stringsAsFactors = FALSE)
# Seattle.Crime.Narcotics is not sourced, as the data frame is too large; if big picture needed, then source it
Seattle.Crime.Narcotics <- read.table(gzfile("./Data/CrimeSeattleNarcotics.gz"),row.names=1)
source("./Codes/US Census Data.R") # still need to subset to GEOIDs of Seattle (to have only relevant data)
# US Census Data for Seattle # merged with seattle.crime (and .narcotics)
# Finding the hundred building blocks to merge the data from Seattle Retailers with
x1 <- aggregate(cbind(lon.Ret, lat.Ret) ~ Address.Ret, data=Seattle.Retailer, FUN=function(x) mean(range(x)))
x2 <- aggregate(cbind(lon, lat) ~ Hundred.Block.Location,
data=Seattle.Crime.Narcotics, FUN=function(x) mean(range(x)))
# create a loop where each individual value of x1 is distance measured with x2
# and print the resulting 15 observations in a new object called "min.dist"
# This can then be used for merging along this point
# Create a loop to get the minimum distance values for each Retailer to Hundred Blocks
for (loop in (1:nrow(x1))){
a <- rdist.earth(matrix(c(x2$lon, x2$lat), ncol=2),
matrix(c(x1[1:loop,"lon.Ret"], x1[1:loop,"lat.Ret"]), ncol=2),
miles=FALSE, R=6371)
}
# Create a vector "b" for all minimal distances
a <- as.data.frame(a)
for (value in (1:ncol(a))){
a[value, "value"] <- which.min(a[,value])
}
# Clean vector for analysis
b <- na.omit(a)
b <- as.data.frame(b$value)
b
# Which Hundred blocks are concerned?
Seattle.Crime.Narcotics[b$`b$value`,c("Hundred.Block.Location", "lat", "lon")]
# Clean for mergers
b$Address <- x1$Address
b$Address.narc <- Seattle.Crime.Narcotics[b$`b$value`,"Hundred.Block.Location"]
b <- b[,-1]
b
# Merge Addresses for narcotics with normal addresses
colnames(Seattle.Retailer)[colnames(Seattle.Retailer)=="Address.Ret"] <- "Address"
colnames(b)[colnames(b)=="Address.narc"] <- "Address.Narc"
Seattle.Retailer <- inner_join(Seattle.Retailer, b, by="Address")
# Merge Seattle.Retailer with Seattle.Crime.Narcotics
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="lat"] <- "lat.Narc"
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="lon"] <- "lon.Narc"
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="Hundred.Block.Location"] <- "Address.Narc"
colnames(Seattle.Retailer)[colnames(Seattle.Retailer)=="Address"] <- "Address.Ret"
#Merge also by Month
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by="Address.Narc", all=TRUE)
###
Seattle.Crime.Narcotics$Month.Narc <- gsub('.{12}$', '',Seattle.Crime.Narcotics$Event.Clearance.Date)
Seattle.Retailer$Month.Narc <- Seattle.Retailer$Month.Ret
head(Seattle.Retailer$Month.Narc)
str(Seattle.Retailer$Month.Narc)
str(Seattle.Crime.Narcotics$Month.Narc)
sub_total <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by=c("Address.Narc", "Month.Narc"), all=TRUE)
j <- sub_total[, c("Event.Clearance.Date", "Month.Ret")]
j <- na.omit(j)
table(j)
head(j)
table(j$Month.Ret, j$Event.Clearance.Date)
table(j$Month.Ret)
j <- sub_total[, c("Event.Clearance.Date", "Month.Ret")]
j <- na.omit(j$Event.Clearance.Date)
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by="Address.Narc", all=TRUE)
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by=c("Address.Narc", "Month.Narc"), all=TRUE)
rm(a, b, x1, x2, loop, value, j)
names(Seattle.Merged)
table(Seattle.Merged$Month.Ret, Seattle.Merged$Month.Narc)
names(Seattle.Merged)
sub_total <- Seattle.Merged[,-c(4, 6:7, 9:11)]
names(sub_total)
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Narc))
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Ret))
month_vector <- which(grepl("2016-10", Seattle.Merged$Month.Ret))
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Narc))
sub_total <- sub_total[-month_vector,]
table(Seattle.Merged$Month.Ret, Seattle.Merged$Month.Narc)
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Narc))
table(Seattle.Merged$Month.Ret, sub_total$Month.Narc)
table(sub_total$Month.Ret, sub_total$Month.Narc)
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Narc))
Seattle.Merged <- Seattle.Merged[-month_vector,]
Seattle.Merged <- Seattle.Merged[,-c(4, 6:7, 9:11)]
class(sub_total$Event.Clearance.Date) # at the moment it is a factor variable
class(Seattle.Merged$Event.Clearance.Date) # at the moment it is a factor variable
Seattle.Merged$Event.Clearance.Date <- gsub('.{9}$', '',Seattle.Merged$Event.Clearance.Date)
Seattle.Merged$Event.Clearance.Date <- strptime(Seattle.Merged$Event.Clearance.Date, format= "%Y-%m-%d")
head(Seattle.Merged$Event.Clearance.Date) # now date is in POSIXlt format
head(Seattle.Merged)
head(Seattle.Merged$Established.Ret)
Seattle.Merged$Established.Ret
table(Seattle.Merged$Established.Ret)
Seattle.Retailer <- read.table("./Data/Location.txt", sep=",", stringsAsFactors = FALSE)
table(Seattle.Retailer$Established.Ret)
table(Seattle.Seattle.Retailer$Established.Ret)
table(Seattle.Retailer$Established.Ret)
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Apr 2015"] <- "2015-04"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Aug 2015"] <- "2015-08"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Dec 2015"] <- "2015-12"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Feb 2015"] <- "2015-02"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Jul 2014"] <- "2014-07"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Jun 2015"] <- "2015-06"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since May 2015"] <- "2015-05"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Nov 2014"] <- "2014-11"
Seattle.Retailer$Established.Ret[Seattle.Retailer$Established.Ret=="Retailer since Sep 2014"] <- "2014-09"
table(Seattle.Retailer$Established.Ret)
j <- which(grepl("2016", Seattle.Retailer$Month.Ret))
k <- which(grepl("2015", Seattle.Retailer$Month.Ret))
l <- which(grepl("2014", Seattle.Retailer$Month.Ret))
View(Seattle.Retailer)
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by=c("Address.Narc", "Month.Narc"), all=TRUE)
# Setting our working directory
wrkdir <- c('C:/Users/Benji/Desktop/Statistics/Git/Repositories/E1180Project',
'~/Hertie School/Fall 2016/CollaborativeSocialScienceDataAnalysis/CSSR')
repmis::set_valid_wd(wrkdir)
# Installing packages
packages <- c('dplyr', 'repmis', 'ggmap', 'ggplot2', 'geosphere', 'fields', 'lubridate')
for (p in packages) {
if (p %in% installed.packages()) require(p, character.only=TRUE)
else {
install.packages(p)
require(p, character.only=TRUE)
}
}
# Creating a BibTex file
repmis::LoadandCite(packages, file = './BibTex/RpackageCitations_Analysis.bib')
# Removing from global environment for better readability
rm(packages, p, wrkdir)
###
# Data (last updated on November 5th)
###
# Clean both Retailer and Producer/Processor Data
source("./Codes/Cleaning_Retailers.R")
source("./Codes/Cleaning_ProdProc.R")
# Locations of Seattle's retailers are not sources, as the geocaching from Google is temperemental
Seattle.Retailer <- read.table("./Data/Location.txt", sep=",", stringsAsFactors = FALSE)
# Seattle.Crime.Narcotics is not sourced, as the data frame is too large; if big picture needed, then source it
Seattle.Crime.Narcotics <- read.table(gzfile("./Data/CrimeSeattleNarcotics.gz"),row.names=1)
source("./Codes/US Census Data.R") # still need to subset to GEOIDs of Seattle (to have only relevant data)
# US Census Data for Seattle # merged with seattle.crime (and .narcotics)
# Finding the hundred building blocks to merge the data from Seattle Retailers with
x1 <- aggregate(cbind(lon.Ret, lat.Ret) ~ Address.Ret, data=Seattle.Retailer, FUN=function(x) mean(range(x)))
x2 <- aggregate(cbind(lon, lat) ~ Hundred.Block.Location,
data=Seattle.Crime.Narcotics, FUN=function(x) mean(range(x)))
# create a loop where each individual value of x1 is distance measured with x2
# and print the resulting 15 observations in a new object called "min.dist"
# This can then be used for merging along this point
# Create a loop to get the minimum distance values for each Retailer to Hundred Blocks
for (loop in (1:nrow(x1))){
a <- rdist.earth(matrix(c(x2$lon, x2$lat), ncol=2),
matrix(c(x1[1:loop,"lon.Ret"], x1[1:loop,"lat.Ret"]), ncol=2),
miles=FALSE, R=6371)
}
# Create a vector "b" for all minimal distances
a <- as.data.frame(a)
for (value in (1:ncol(a))){
a[value, "value"] <- which.min(a[,value])
}
# Clean vector for analysis
b <- na.omit(a)
b <- as.data.frame(b$value)
b
# Which Hundred blocks are concerned?
Seattle.Crime.Narcotics[b$`b$value`,c("Hundred.Block.Location", "lat", "lon")]
# Clean for mergers
b$Address <- x1$Address
b$Address.narc <- Seattle.Crime.Narcotics[b$`b$value`,"Hundred.Block.Location"]
b <- b[,-1]
b
# Merge Addresses for narcotics with normal addresses
colnames(Seattle.Retailer)[colnames(Seattle.Retailer)=="Address.Ret"] <- "Address"
colnames(b)[colnames(b)=="Address.narc"] <- "Address.Narc"
Seattle.Retailer <- inner_join(Seattle.Retailer, b, by="Address")
# Merge Seattle.Retailer with Seattle.Crime.Narcotics
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="lat"] <- "lat.Narc"
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="lon"] <- "lon.Narc"
colnames(Seattle.Crime.Narcotics)[colnames(Seattle.Crime.Narcotics)=="Hundred.Block.Location"] <- "Address.Narc"
colnames(Seattle.Retailer)[colnames(Seattle.Retailer)=="Address"] <- "Address.Ret"
# Merge also by Month
Seattle.Crime.Narcotics$Month.Narc <- gsub('.{12}$', '',Seattle.Crime.Narcotics$Event.Clearance.Date)
Seattle.Retailer$Month.Narc <- Seattle.Retailer$Month.Ret
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by=c("Address.Narc", "Month.Narc"), all=TRUE)
# Remove
rm(a, b, x1, x2, loop, value)
month_vector <- which(grepl("2016-11", Seattle.Merged$Month.Narc))
Seattle.Merged <- Seattle.Merged[-month_vector,]
# 2. Which columns do we need
names(Seattle.Merged)
# We do not need columns: 4, 6:7, 9:11
Seattle.Merged <- Seattle.Merged[,-c(4, 6:7, 9:11)]
# 3. Set date in R-readable format
class(Seattle.Merged$Event.Clearance.Date) # at the moment it is a factor variable
# Delete the time component, as we are only interested in dates. Also only interested in months
Seattle.Merged$Event.Clearance.Date <- gsub('.{9}$', '',Seattle.Merged$Event.Clearance.Date)
Seattle.Merged$Event.Clearance.Date <- strptime(Seattle.Merged$Event.Clearance.Date, format= "%Y-%m-%d")
head(Seattle.Merged$Event.Clearance.Date) # now date is in POSIXlt format
# 4. Change Established in Month
table(Seattle.Merged$Established.Ret)
Seattle.Merged2 <- Seattle.Merged
Seattle.Merged2$Established.Ret <- NA
j <- which(grepl("Retailer since Apr 2015", Seattle.Merged$Established.Ret)
j <- which(grepl("Retailer since Apr 2015", Seattle.Merged$Established.Ret))
j <- which(grepl("Retailer since Apr 2015", Seattle.Merged$Established.Ret))
Apr15
Seattle.Merged[Apr15, "Name.Ret"]
Apr15 <- which(grepl("Retailer since Apr 2015", Seattle.Merged$Established.Ret))
Seattle.Merged[Apr15, "Name.Ret"]
vector2 <- which(grepl("E REPUBLICAN", Seattle.Retailer$Address))
vector2 <- which(grepl("E REPUBLICAN", Seattle.Retailer$Address.Ret))
established <- Seattle.Retailer[vector2,6]
table(established)
table(Seattle.Merged$Name.Ret)
table(Seattle.Merged$Name.Ret, Seattle.Merged$Established.Ret)
y <- which(grepl("#Hashtag", Seattle.Merged$Name.Ret))
y <- which(grepl("#HASHTAG", Seattle.Merged$Name.Ret))
Seattle.Merged[y, "Address.narc"]
Seattle.Merged[y, "Address.Narc"]
k <- which(grepl("29XX BLOCK OF E MADISON ST", Seattle.Merged$Established.Ret))
k <- which(grepl("29XX BLOCK OF E MADISON ST", Seattle.Merged$Address.Narc))
View(Seattle.Merged[k,])
Seattle.Merged <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by=c("Address.Narc", "Month.Narc"), all=TRUE)
names(Seattle.Merged)
Seattle.Merged <- Seattle.Merged[,-c(4, 6:7, 9:11, 19)]
rm(month_vector, Apr15, established, j, k, y, vector2)
rm(month_vector, Seattle.Merged2)
View(Seattle.SOE)
x3 <- aggregate(cbind(lon.Narc, lat.Narc) ~ Address.Ret, data=Seattle.Merged, FUN=function(x) mean(range(x)))
x3 <- aggregate(cbind(lon.Narc, lat.Narc) ~ Address.Narc, data=Seattle.Merged, FUN=function(x) mean(range(x)))
View(x3)
x4 <- aggregate(cbind(lon, lat) ~ GEOID,
data=Seattle.SOE, FUN=function(x) mean(range(x)))
View(x4)
for (loop in (1:nrow(x3))){
c <- rdist.earth(matrix(c(x4$lon, x4$lat), ncol=2),
matrix(c(x3[1:loop,"lon.Narc"], x3[1:loop,"lat.Narc"]), ncol=2),
miles=FALSE, R=6371)
}
x3 <- aggregate(cbind(lon, lat) ~ GEOID,
data=Seattle.SOE, FUN=function(x) mean(range(x)))
x4 <- aggregate(cbind(lon.Narc, lat.Narc) ~ Address.Narc, data=Seattle.Merged, FUN=function(x) mean(range(x)))
for (loop in (1:nrow(x3))){
c <- rdist.earth(matrix(c(x4$lon.Narc, x4$lat.Narc), ncol=2),
matrix(c(x3[1:loop,"lon"], x3[1:loop,"lat"]), ncol=2),
miles=FALSE, R=6371)
}
c <- as.data.frame(c)
for (value2 in (1:ncol(c))){
c[value2, "value"] <- which.min(c[,value2])
}
# Clean vector for analysis
d <- na.omit(c)
d <- as.data.frame(d$value)
d
Seattle.Crime.Narcotics[d$`d$value`,c("Hundred.Block.Location", "lat", "lon")]
Seattle.Crime.Narcotics[d$`d$value`,c("Address.Narc", "lat", "lon")]
names(Seattle.Crime.Narcotics)
Seattle.Crime.Narcotics[d$`d$value`,c("Address.Narc", "lat.Narc", "lon.Narc")]
View(x3)
d$Address <- x3$GEOID
d$Address.Narc <- Seattle.Crime.Narcotics[d$`b$value`,"Hundred.Block.Location"]
d <- d[,-1]
b
d
d <- na.omit(c)
d <- as.data.frame(d$value)
d
d$Address.Narc <- Seattle.Crime.Narcotics[d$`b$value`,"Hundred.Block.Location"]
d
d$Address.Narc <- NA
d
vector2 <- Seattle.Crime.Narcotics[d$`b$value`,"Hundred.Block.Location"]
vector2 <- Seattle.Crime.Narcotics[d$`d$value`,"Hundred.Block.Location"]
vector2 <- Seattle.Crime.Narcotics[d$`d$value`,"Address.Narc"]
d$Address.Narc <- Seattle.Crime.Narcotics[d$`d$value`,"Address.Narc"]
View(d)
d <- na.omit(c)
d <- as.data.frame(d$value)
d
d$Address.Narc <- Seattle.Crime.Narcotics[d$`d$value`,"Address.Narc"]
d
d <- d[,-1]
d
d <- as.data.frame(d[,-1])
d <- na.omit(c)
d <- as.data.frame(d$value)
d
# Which Hundred blocks are concerned?
Seattle.Crime.Narcotics[d$`d$value`,c("Address.Narc", "lat.Narc", "lon.Narc")]
names(Seattle.Crime.Narcotics)
# Clean for mergers
d$Address.Narc <- Seattle.Crime.Narcotics[d$`d$value`,"Address.Narc"]
d <- as.data.frame(d[,-1])
d
d <- na.omit(c)
d <- as.data.frame(d$value)
d
d <- na.omit(c)
d <- as.data.frame(d$value)
d
View(x3)
d$Address <- x3$GEOID
d
d$Address.Narc <- Seattle.Crime.Narcotics[d$`d$value`,"Address.Narc"]
d
d <- d[,-1]
d
Seattle.SOEf <- inner_join(Seattle.SOE, d, by="Address.Narc")
d$GEOID <- x3$GEOID
d
d <- d[,-1]
d
Seattle.SOEf <- inner_join(Seattle.SOE, d, by="GEOID")
Seattle.SOE <- inner_join(Seattle.SOE, d, by="GEOID")
names(Seattle.Crime.Narcotics)
names(Seattle.SOE)
colnames(Seattle.SOE)[colnames(Seattle.SOE)=="lat"] <- "lat.SOE"
colnames(Seattle.SOE)[colnames(Seattle.SOE)=="lon"] <- "lon.SOE"
names(Seattle.Crime.Narcotics)
names(Seattle.SOE)
Seattle.Merged2 <- merge(Seattle.Crime.Narcotics, Seattle.Retailer, by="Address.Narc", all=TRUE)
Seattle.Merged2 <- merge(Seattle.Crime.Narcotics, Seattle.SOE, by="Address.Narc", all=TRUE)
Seattle.Merged3 <- merge(Seattle.Merged, Seattle.SOE, by="Address.Narc", all=TRUE)
View(Seattle.Merged3)
Seattle.Merged <- merge(Seattle.Merged, Seattle.SOE, by="Address.Narc", all=TRUE)
names(Seattle.Merged)
map.seattle_city <- qmap("seattle", zoom = 11, source="stamen", maptype="toner",darken = c(.3,"#BBBBBB"))
map.seattle_city +
geom_polygon(data=Seattle.Merged, aes(x=lon.SOE,y=lat.SOE, group=group, fill=percent, color=muted("blue")), alpha=0.9) +
geom_point(data=Seattle.Merged, aes(x=lon.Narc, y=lat.Narc), color="dark green", alpha=0.03, size=1.1) +
geom_point(data=Seattle.Merged, aes(x=lon.Ret, y=lat.Ret), color="dark red", size=2)
sub_total <- na.omit(Seattle.Merged2$percent)
sub_total <- na.omit(Seattle.Merged2$percent)
sub_total <- as.data.frame(na.omit(Seattle.Merged2$percent))
View(sub_total)
sub_total <- Seattle.Merged2[na.omit(Seattle.Merged2$percent)]
sub_total <- Seattle.Merged2[na.omit(Seattle.Merged2$percent),]
View(sub_total)
sub_total <- na.omit(Seattle.Merged2["percent",])
j <- which(Seattle.Merged2$percent==NA)
j <- which(Seattle.Merged2$percent=="NA")
table(Seattle.Merged2$percent)
j <- na.omit(Seattle.Merged2$percent)
j <- as.data.frame(na.omit(Seattle.Merged2$percent))
table(j)
View(j)
j <- as.data.frame(na.omit(Seattle.Merged2$percent))
table(j)
j <- na.omit(Seattle.Merged2$percent)
table(j)
sub_total <- Seattle.Merged2[-j,]
View(sub_total)
j <- na.omit(Seattle.Merged2$percent)
sub_total <- Seattle.Merged2[-j,]
j <- na.omit(Seattle.Merged$percent)
sub_total <- Seattle.Merged[-j,]
View(sub_total)
j <- which(is.na(Seattle.Merged$percent))
j <- na.omit(Seattle.Merged$percent)
j <- which(is.na(Seattle.Merged$percent))
sub_total <- Seattle.Merged[-j,]
View(sub_total)
map.seattle_city +
geom_polygon(data=sub_total, aes(x=lon.SOE,y=lat.SOE, group=group, fill=percent, color=muted("blue")), alpha=0.9) +
geom_point(data=sub_total, aes(x=lon.Narc, y=lat.Narc), color="dark green", alpha=0.03, size=1.1) +
geom_point(data=sub_total, aes(x=lon.Ret, y=lat.Ret), color="dark red", size=2)
